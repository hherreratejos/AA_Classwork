class Array

    def my_each(&prc)
        i = 0
        while i < self.length
            prc.call(self[i])
            i += 1
        end
        self
    end

    def my_select(&prc)
        selected = []
        self.my_each do |ele|
            selected << ele if prc.call(ele)           
        end
        selected
    end

    def my_reject(&prc)
        not_rejected = []
        self.my_each do |ele|
            not_rejected << ele if !prc.call(ele)
        end
        not_rejected
    end

    def my_any?(&prc)
        self.my_each do |ele|
            return true if prc.call(ele)
        end
        false
    end

    def my_all?(&prc)
        self.my_each do |ele|
            return false if !prc.call(ele)
        end
        true
    end

    def my_flatten
<<<<<<< HEAD
        
=======
        flatten = []
        self.my_each do |ele|
            if ele.is_a? Array
                flatten += ele.my_flatten
            else
                flatten << ele
            end
        end
        flatten
>>>>>>> c8230d69d561902a706003afe2de7c31f2c80970
    end

    def my_zip (*arrs)
        (0...self.length).map do |i|
            arrs.map {|subarr| [self[i]] += [subarr[i]]}
        end
    end

end


a = [ 4, 5, 6 ]
b = [ 7, 8, 9 ]
p [1, 2, 3].my_zip(a, b)
# [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
